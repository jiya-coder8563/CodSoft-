import cv2
import face_recognition

# Load the pre-trained Haar Cascade model for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load known images and encode the faces
known_image = face_recognition.load_image_file('known_person.jpg')  # Replace with path to a known image
known_face_encoding = face_recognition.face_encodings(known_image)[0]

# Initialize arrays to hold known face encodings and names
known_face_encodings = [known_face_encoding]
known_face_names = ["Known Person"]  # Name associated with the image

# Function to detect and recognize faces
def detect_and_recognize(image):
    # Convert the image to grayscale for face detection with Haar Cascade
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Detect faces in the image
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)
    
    # Convert the image to RGB (face_recognition works with RGB images)
    rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Find face locations and encodings
    face_locations = face_recognition.face_locations(rgb_image)
    face_encodings = face_recognition.face_encodings(rgb_image, face_locations)
    
    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        # Check if the face matches any known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        
        name = "Unknown"  # Default if no match is found
        
        if True in matches:
            first_match_index = matches.index(True)
            name = known_face_names[first_match_index]
        
        # Draw a rectangle around the face and label it with the name
        cv2.rectangle(image, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(image, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)
    
    return image

# Test the face detection and recognition on an image
image = cv2.imread('test_image.jpg')  # Replace with the path to a test image
result_image = detect_and_recognize(image)

# Show the result image with detected and recognized faces
cv2.imshow('Detected and Recognized Faces', result_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
