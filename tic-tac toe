import random

# Constants for the players
PLAYER_X = 'X'  # Human Player
PLAYER_O = 'O'  # AI Player

# Function to print the board
def print_board(board):
    print("\n")
    for row in range(3):
        print(' | '.join(board[row]))
        if row < 2:
            print("---------")
    print("\n")

# Function to check if the game is over (either win or draw)
def check_winner(board):
    # Check rows and columns for a win
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != ' ':
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != ' ':
            return board[0][i]
    
    # Check diagonals for a win
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]
    
    # Check for draw (no empty spaces left)
    if all(board[i][j] != ' ' for i in range(3) for j in range(3)):
        return 'D'  # D for Draw
    
    return None  # Game is still ongoing

# Function to evaluate the board for Minimax
def evaluate(board):
    winner = check_winner(board)
    if winner == PLAYER_O:
        return 10
    elif winner == PLAYER_X:
        return -10
    return 0

# Minimax function with optional Alpha-Beta Pruning
def minimax(board, depth, is_maximizing_player, alpha, beta):
    score = evaluate(board)

    # If the game is over, return the score
    if score == 10 or score == -10:
        return score
    if score == 0 and all(board[i][j] != ' ' for i in range(3) for j in range(3)):
        return 0  # Draw

    if is_maximizing_player:
        best = -float('inf')  # Best score for AI (maximizing)
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = PLAYER_O  # AI move
                    best = max(best, minimax(board, depth + 1, False, alpha, beta))
                    board[i][j] = ' '  # Undo move
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = float('inf')  # Best score for player (minimizing)
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = PLAYER_X  # Player move
                    best = min(best, minimax(board, depth + 1, True, alpha, beta))
                    board[i][j] = ' '  # Undo move
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

# Function to find the best move for AI
def find_best_move(board):
    best_val = -float('inf')
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = PLAYER_O  # AI move
                move_val = minimax(board, 0, False, -float('inf'), float('inf'))
                board[i][j] = ' '  # Undo move

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

# Function for the human player's move
def player_move(board):
    while True:
        try:
            move = int(input("Enter your move (1-9): "))
            if move < 1 or move > 9:
                print("Invalid move. Please enter a number between 1 and 9.")
                continue
            row, col = divmod(move - 1, 3)
            if board[row][col] != ' ':
                print("This position is already taken. Try again.")
            else:
                board[row][col] = PLAYER_X
                break
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 9.")

# Main function to run the Tic-Tac-Toe game
def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print_board(board)

    while True:
        # Human move
        player_move(board)
        print_board(board)

        # Check if the game is over
        result = check_winner(board)
        if result:
            if result == PLAYER_X:
                print("You win!")
            elif result == PLAYER_O:
                print("AI wins!")
            else:
                print("It's a draw!")
            break
        
        # AI move
        print("AI is making its move...")
        row, col = find_best_move(board)
        board[row][col] = PLAYER_O
        print_board(board)

        # Check if the game is over
        result = check_winner(board)
        if result:
            if result == PLAYER_X:
                print("You win!")
            elif result == PLAYER_O:
                print("AI wins!")
            else:
                print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
